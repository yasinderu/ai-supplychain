version: "3.9"

services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  llm:
    image: ghcr.io/huggingface/text-generation-inference:latest
    environment:
      - MODEL_ID=${MODEL_ID}
      - DEVICE=gpu
    ports:
      - "8080:80"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      - ./models:/models
    networks:
      - sc_network

  backend:
    build: ./backend
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - TGI_URL=${TGI_URL}
      - LOCAL_SENTENCE_VARIABLE_MODEL_DIR=${LOCAL_SENTENCE_VARIABLE_MODEL_DIR}
      - AUTH_SECRET_KEY=${AUTH_SECRET_KEY}
      - AUTH_ALGORITHM=${AUTH_ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
    restart: on-failure
    volumes:
      - ./backend:/app
      - ./models:/models
    networks:
      - sc_network

  # frontend:
  #   build: ./frontend
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=${NODE_ENV}
  #     - API_ENDPOINT=${API_ENDPOINT}
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #     - /app/.next
  #     - ./models:/models
  #   networks:
  #     - sc_network

volumes:
  postgres_data:

networks:
  sc_network:
    driver: bridge
